explicit | nominal | static |- ! [[Opa (programming language)|Opa]] | {{Yes|safe}} | implicit with optional explicit typing | structural | static |- ! [[Oxygene (programming language)|Oxygene]] | {{No|unsafe}} | implicit | | static |- ! [[Oz (programming language)|Oz]] | {{Yes|safe}} | implicit | structural | dynamic |- ! [[Pascal (programming language)|Pascal]] | {{No|unsafe}}<ref group=TS name=r2 /> | explicit | nominal | static |- ! [[Perl]] 5 | | implicit | | dynamic |- ! [[Perl 6]] | | partially implicit<ref group=TS>explicit for static types</ref> | | dynamic with optional static typing |- ! [[PHP]] | | implicit | | dynamic |- ! [[Plus (programming language)|Plus]] | {{Yes|safe}} | explicit | structural | static, dynamic (optional) |- ! [[Prolog]] | | | | dynamic |- ! [[Pure (programming language)|Pure]] | | | | dynamic |- ! [[Python (programming language)|Python]] | {{Yes|safe}} | implicit | structural | dynamic |- ! [[REBOL]] | {{Yes|safe}} | implicit | | dynamic |- ! [[IBM RPG|RPG]] | {{No|unsafe}} | | | static |- ! [[Ruby (programming language)|Ruby]] | {{Yes|safe}} | implicit | structural | dynamic |- ! [[Rust (programming language)|Rust]] | {{Yes|safe}} | implicit with optional explicit typing | | static with optional dynamic typing |- ! [[S (programming language)|S]] | | | | dynamic |- ! [[S-Lang (programming library)|S-Lang]] | {{Yes|safe}} | implicit | | dynamic |- ! [[Scala (programming language)|Scala]] | {{Yes|safe}} | partially implicit (local type inference) | nominal (subclassing) and structural (structural) | static |- ! [[Scheme (programming language)|Scheme]] | {{Yes|safe}} | implicit | | dynamic (latent) |- ! [[Seed7]] | {{Yes|safe}} | explicit | nominal | static |- ! [[Simula]] | {{Yes|safe}} | | | static<ref group=TS>optional for formal and virtual procedures</ref> |- ! [[Smalltalk]] | {{Yes|safe}} | implicit | | dynamic |- ! [[Swift (programming language)|Swift]] | {{Yes|safe}} | partially implicit (local type inference) | nominal (subclassing) and structural (structural) | static |- ! [[Standard ML]] | {{Yes|safe}} | implicit with optional explicit typing | structural | static |- ! [[Tcl]] | | | | dynamic |- ! [[Visual Basic]] | {{Yes|safe}} | implicit with optional explicit typing | nominal | static |- ! {{nowrap|[[Visual Basic .NET]]}} | {{No|unsafe}}<ref group=TS name=r2 /> | explicit | | static |- ! [[Visual Prolog]] | {{Yes|safe}} | partially implicit | nominal | static |- ! [[Windows PowerShell]] | {{Yes|safe}} | implicit | | dynamic |- ! [[XL (programming language)|XL]] | {{Yes|safe}} | | nominal | static |- ! [[Xojo]] | {{Yes|safe}} | explicit | nominal | static |- class="sortbottom" ! Language ! Type safety ! Type expression ! Type compatibility among composites ! Type checking |}  {{Reflist|group=TS}}  ==Failsafe I/O and system calls== Most programming languages will print an [[error message]] and/or throw an [[exception handling|exception]] if an [[input/output]] operation or other [[system call]] (e.g., [[chmod]], [[kill (Unix)|kill]]) fails, unless the programmer has explicitly arranged for different handling of these events. Thus, these languages [[failsafe|fail safely]] in this regard.  Some (mostly older) languages require that the programmer explicitly add checks for these kinds of errors. Psychologically, different [[List of cognitive biases|cognitive biases]] (e.g., [[optimism bias]]) may affect novice and experts alike and these omissions can lead to [[software bug|erroneous behavior]].  {|class="wikitable sortable" |- ! Language ! Failsafe I/O |- ! [[Ada (programming language)|Ada]] | {{yes}} (exceptions) |- ! [[ALGOL]] | {{yes}} (exceptions or return value depending on function) |- ! [[AutoHotkey]] | {{no}} (global ErrorLevel must be explicitly checked) |- ! [[Bro (software)|Bro]] | {{yes}} |- ! [[C (programming language)|C]] | {{no}}<ref group="FSIO">[[GNU compiler collection|gcc]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref> |- ! [[C++]] | {{no}}<ref name="VS" group="FSIO">[[GNU compiler collection|g++]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref> |- ! [[C Sharp (programming language)|C#]] | {{yes}} |- ! [[COBOL]] | {{no}} |- ! [[Common Lisp]] | {{yes}} |- ! [[D (programming language)|D]] | {{yes}}{{citation needed|date=February 2011}} |- ! [[Eiffel (programming language)|Eiffel]] | {{no}} – It actually depends on the library and it is not defined by the language |- ! [[Erlang (programming language)|Erlang]] | {{yes}} |- ! [[Falcon (programming language)|Falcon]] | {{yes}} |- ! [[Fortran]] | {{yes}} |- ! [[GLBasic]] | {{no}} – Will generally cause program to crash |- ! [[Go (programming language)|Go]] | {{yes}} (unless result explicitly ignored) |- ! [[Gosu (programming language)|Gosu]] | {{yes}} |- ! [[Harbour (programming language)|Harbour]] | {{yes}} |- ! [[Haskell (programming language)|Haskell]] | {{yes}} |- ! [[ISLISP]] | {{yes}} |- ! [[Java (programming language)|Java]] | {{yes}} |- ! [[Julia (programming language)|Julia]] | {{yes}} |- ! [[Kotlin (programming language)|Kotlin]] | {{yes}} |- ! [[LabVIEW]] | {{yes}} |- ! [[Lua (programming language)|Lua]] | {{no}} (some functions do not warn or throw exceptions) |- ! [[Mathematica]] | {{yes}} |- ! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]]) | {{some}} |- ! [[Objective-C]] | {{yes}} (exceptions) |- ! [[OCaml]] | {{yes}} (exceptions) |- ! [[Perl]] | {{no}}<ref group="FSIO">Considerable error checking can be enabled optionally, but by default Perl is not failsafe.</ref> |- ! [[Perl 6]] | {{yes}} |- ! [[PHP]] | {{yes}} |- ! [[Python (programming language)|Python]] | {{yes}} |- ! [[REBOL]] | {{yes}} |- ! [[Ruby (programming language)|Ruby]] | {{yes}} |- ! [[Rust (programming language)|Rust]] | {{yes}} (unless result explicitly ignored) |- ! [[S (programming language)|S]] | {{unknown}} |- ! [[Smalltalk (programming language)|Smalltalk]] | {{yes}} |- ! [[Scala (programming language)|Scala]] | {{yes}}<ref>Scala runs on the Java Virtual Machine from which it inherits the runtime exception handling.</ref> |- ! [[Standard ML]] | {{yes}}{{citation needed|date=February 2011}} |- ! [[Tcl]] | {{yes}} |- ! [[Visual Basic]] | {{yes}} |- ! [[Visual Prolog]] | {{yes}} |- ! [[Xojo]] | {{yes}} |- class="sortbottom" ! Language ! Failsafe I/O |}  {{Reflist|group=FSIO}}  ==Expressiveness== {| id="Expressiveness" class="wikitable" style="float:right;" |- ! Language !! Statements ratio<ref>Data from [http://books.google.at/books?id=3JfE7TGUwvgC&pg=PT100 Code Complete, p. 100]. The ''Statements ratio'' column "shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.</ref> ! Lines ratio<ref>The ratio of line count tests won by each language to the number won by C when using the ''Compare to'' feature at [http://benchmarksgame.alioth.debian.org/debian/c.php benchmarksgame.alioth.debian.org]. Last updated May, 2006. C gcc was used for C, C++ g++ was used for C++, FORTRAN G95 was used for FORTRAN, Java JDK Server was used for Java, and Smalltalk GST was used for Smalltalk.</ref> |- | C || 1 || 1 |- | C++ || 2.5 || 1 |- | Fortran || 2 || 0.8 |- | Java || 2.5 || 1.5 |- | Perl || 6 || 6 |- | Smalltalk || 6 || 6.25 |- | Python || 6 || 6.5 |}  The literature on programming languages contains an abundance of informal claims about their relative [[expressive power]], but there is no framework for formalizing such statements nor for deriving interesting consequences.<ref>{{cite conference | id = {{citeseerx|10.1.1.51.4656}} | title = On the Expressive Power of Programming Languages | first = Matthias | last = Felleisen | conference = ESOP '90 3rd European Symposium on Programming }}</ref> This table provides two measures of expressiveness from two different sources. An additional measure of expressiveness, in [http://benchmarksgame.alioth.debian.org/play.html#gzbytes GZip bytes], can be found on the Computer Language Benchmarks Game. {{-}}  ==Benchmarks== [[benchmark (computing)|Benchmarks]] are designed to mimic a particular type of workload on a component or system. The computer programs used for compiling some of the benchmark data in this section may not have been fully optimized, and the relevance of the data is disputed. The most accurate benchmarks are those that are customized to your particular situation. Other people's benchmark data may have some value to others, but proper interpretation brings many [[benchmark (computing)#Challenges|challenges]]. [http://benchmarksgame.alioth.debian.org/ The Computer Language Benchmarks Game] site warns against [http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.php over-generalizing from benchmark data], but contains a large number of micro-benchmarks of reader-contributed code snippets, with an interface that generates various charts and tables comparing specific programming languages and types of tests.  ==Timeline of specific language comparisons== * 1973 – [http://comjnl.oxfordjournals.org/cgi/content/abstract/17/4/325 Comparative Notes on Algol 68 and PL/I] – S. H. Valentine – February 1973 * 1976 – Evaluation of [[ALGOL 68]], [[JOVIAL]] J3B, [[Pascal (programming language)|Pascal]], [[Simula]] 67, and [[TACPOL]] Versus TINMAN – Requirements for a Common High Order Programming Language. <!-- [http://www.dtic.mil/srch/doc?collection=t2&id=ADA037637 Report Number: 1021-14] --> * 1977 – [http://comjnl.oxfordjournals.org/cgi/content/abstract/21/4/316 A comparison of PASCAL and ALGOL 68]<ref>http://dare.ubvu.vu.nl/bitstream/1871/2609/1/11054.pdf</ref> – [[Andrew S. Tanenbaum]] – June 1977. * 1993 – [http://cm.bell-labs.com/cm/cs/who/dmr/hopl.html Five Little Languages and How They Grew] – [[BLISS]], [[Pascal (programming language)|Pascal]], [[ALGOL 68]], [[BCPL]] & [[C (programming language)|C]] – [[Dennis M. Ritchie]] – April 1993. * 2009 – [http://www.cowlark.com/2009-11-15-go On Go – oh, go on] – How well will Google's [[Go (programming language)|Go]] stand up against Brand X programming language? – David Given – November 2009  ==See also== * [[Alphabetical list of programming languages]] * [[Comparison of basic instructions of programming languages]] * [[Comparison of programming languages (string functions)]] * [[Comparison of programming languages (strings)]] * [[Comparison of programming languages (syntax)]] * [[Comparison of programming languages (array)]] * [[Comparison of programming languages (object-oriented programming)]] * [[Comparison of programming languages (list comprehension)]] * [[Comparison of programming languages (mapping)]] * [[Comparison of programming paradigms]] * [[Comparison of multi-paradigm programming languages]] * [[Comparison of type systems]] * [[Educational programming language]] * [[Hello world program examples]] * [[Measuring programming language popularity]] * [[Programming language]]  ==References== {{Reflist|2}}  ==Further reading== * {{cite book|title=A Guide to Programming Languages: Overview and Comparison|first=Ruknet|last=Cezzar|isbn=978-0-89006-812-0}}  ==External links== * [http://99-bottles-of-beer.net/ 99-bottles-of-beer.net] — one program in over a thousand variations and multiple languages. * [http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html The speed, size and dependability of programming languages] — charts and narrative based on The Computer Language Benchmarks Game data. * [http://benchmarksgame.alioth.debian.org/u32/code-used-time-used-shapes.php Shapes: Source Code Size and Run Time] - charts based on current Benchmarks Game data. * [http://www.scriptol.com/programming/choose.php Comparison of syntaxes] with sample codes. * [http://rigaux.org/language-study/syntax-across-languages.html Syntax Across Languages] * [http://merd.sourceforge.net/pixel/language-study/scripting-language/ Scriptometer scores] — multiple comparisons of 26 programming languages. * [http://pleac.sourceforge.net/ PLEAC] — Programming Language Examples Alike Cookbook. * [http://www.ohloh.net/languages OHLOH Language Statistics] — gives an indication of the popularity of programming languages in open-source projects. * [http://hhh.gavilan.edu/dvantassel/history/history.html History of Programming Language Statements] — history and comparison of programming languages. * [http://rosettacode.org/ Rosetta Code] — a programming language comparison wiki  {{DEFAULTSORT:Comparison of programming languages}} [[Category:Programming language comparisons]]</text></page>",